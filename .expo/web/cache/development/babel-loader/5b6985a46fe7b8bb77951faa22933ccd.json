{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Entypo from '@expo/vector-icons/Entypo';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as Font from 'expo-font';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      appIsReady = _useState2[0],\n      setAppIsReady = _useState2[1];\n\n  useEffect(function () {\n    function prepare() {\n      return _regeneratorRuntime.async(function prepare$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(SplashScreen.preventAutoHideAsync());\n\n            case 3:\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(Font.loadAsync(Entypo.font));\n\n            case 5:\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(new Promise(function (resolve) {\n                return setTimeout(resolve, 2000);\n              }));\n\n            case 7:\n              _context.next = 12;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](0);\n              console.warn(_context.t0);\n\n            case 12:\n              _context.prev = 12;\n              setAppIsReady(true);\n              return _context.finish(12);\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 9, 12, 15]], Promise);\n    }\n\n    prepare();\n  }, []);\n  var onLayoutRootView = useCallback(function _callee() {\n    return _regeneratorRuntime.async(function _callee$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!appIsReady) {\n              _context2.next = 3;\n              break;\n            }\n\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(SplashScreen.hideAsync());\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, [appIsReady]);\n\n  if (!appIsReady) {\n    return null;\n  }\n\n  return _jsxs(View, {\n    style: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    onLayout: onLayoutRootView,\n    children: [_jsx(Text, {\n      children: \"SplashScreen Demo! \\uD83D\\uDC4B\"\n    }), _jsx(Entypo, {\n      name: \"rocket\",\n      size: 30\n    })]\n  });\n}","map":{"version":3,"names":["React","useCallback","useEffect","useState","Entypo","SplashScreen","Font","App","appIsReady","setAppIsReady","prepare","preventAutoHideAsync","loadAsync","font","Promise","resolve","setTimeout","console","warn","onLayoutRootView","hideAsync","flex","alignItems","justifyContent"],"sources":["E:/Iti Open source/ReactNative/Day2/lab2/App.js"],"sourcesContent":["// // In App.js in a new project\n\n// import * as React from 'react';\n// import { View, Text } from 'react-native';\n// import { NavigationContainer } from '@react-navigation/native';\n// import { createNativeStackNavigator } from '@react-navigation/native-stack';\n\n// import Home  from './src/screens/Home';\n// import About from \"./src/screens/About\"\n// const Stack = createNativeStackNavigator();\n\n// function App() {\n//   return (\n//     <NavigationContainer>\n//       <Stack.Navigator>\n//         <Stack.Screen name=\"Home\" component={Home} />\n//         <Stack.Screen name=\"About\" component={About} />\n//       </Stack.Navigator>\n//     </NavigationContainer>\n//   );\n// }\n\n// export default App;\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Text, View } from 'react-native';\nimport Entypo from '@expo/vector-icons/Entypo';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as Font from 'expo-font';\n\nexport default function App() {\n  const [appIsReady, setAppIsReady] = useState(false);\n\n  useEffect(() => {\n    async function prepare() {\n      try {\n        // Keep the splash screen visible while we fetch resources\n        await SplashScreen.preventAutoHideAsync();\n        // Pre-load fonts, make any API calls you need to do here\n        await Font.loadAsync(Entypo.font);\n        // Artificially delay for two seconds to simulate a slow loading\n        // experience. Please remove this if you copy and paste the code!\n        await new Promise(resolve => setTimeout(resolve, 2000));\n      } catch (e) {\n        console.warn(e);\n      } finally {\n        // Tell the application to render\n        setAppIsReady(true);\n      }\n    }\n\n    prepare();\n  }, []);\n\n  const onLayoutRootView = useCallback(async () => {\n    if (appIsReady) {\n      // This tells the splash screen to hide immediately! If we call this after\n      // `setAppIsReady`, then we may see a blank screen while the app is\n      // loading its initial state and rendering its first pixels. So instead,\n      // we hide the splash screen once we know the root view has already\n      // performed layout.\n      await SplashScreen.hideAsync();\n    }\n  }, [appIsReady]);\n\n  if (!appIsReady) {\n    return null;\n  }\n\n  return (\n    <View\n      style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}\n      onLayout={onLayoutRootView}>\n      <Text>SplashScreen Demo! ðŸ‘‹</Text>\n      <Entypo name=\"rocket\" size={30} />\n    </View>\n  );\n}"],"mappings":";;AAwBA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,QAAxC,QAAwD,OAAxD;;;AAEA,OAAOC,MAAP,MAAmB,2BAAnB;AACA,OAAO,KAAKC,YAAZ,MAA8B,oBAA9B;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;;;AAEA,eAAe,SAASC,GAAT,GAAe;EAC5B,gBAAoCJ,QAAQ,CAAC,KAAD,CAA5C;EAAA;EAAA,IAAOK,UAAP;EAAA,IAAmBC,aAAnB;;EAEAP,SAAS,CAAC,YAAM;IACd,SAAeQ,OAAf;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA;cAAA,iCAGUL,YAAY,CAACM,oBAAb,EAHV;;YAAA;cAAA;cAAA,iCAKUL,IAAI,CAACM,SAAL,CAAeR,MAAM,CAACS,IAAtB,CALV;;YAAA;cAAA;cAAA,iCAQU,IAAIC,OAAJ,CAAY,UAAAC,OAAO;gBAAA,OAAIC,UAAU,CAACD,OAAD,EAAU,IAAV,CAAd;cAAA,CAAnB,CARV;;YAAA;cAAA;cAAA;;YAAA;cAAA;cAAA;cAUIE,OAAO,CAACC,IAAR;;YAVJ;cAAA;cAaIT,aAAa,CAAC,IAAD,CAAb;cAbJ;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;;IAiBAC,OAAO;EACR,CAnBQ,EAmBN,EAnBM,CAAT;EAqBA,IAAMS,gBAAgB,GAAGlB,WAAW,CAAC;IAAA;MAAA;QAAA;UAAA;YAAA,KAC/BO,UAD+B;cAAA;cAAA;YAAA;;YAAA;YAAA,iCAO3BH,YAAY,CAACe,SAAb,EAP2B;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAD,EASjC,CAACZ,UAAD,CATiC,CAApC;;EAWA,IAAI,CAACA,UAAL,EAAiB;IACf,OAAO,IAAP;EACD;;EAED,OACE,MAAC,IAAD;IACE,KAAK,EAAE;MAAEa,IAAI,EAAE,CAAR;MAAWC,UAAU,EAAE,QAAvB;MAAiCC,cAAc,EAAE;IAAjD,CADT;IAEE,QAAQ,EAAEJ,gBAFZ;IAAA,WAGE,KAAC,IAAD;MAAA;IAAA,EAHF,EAIE,KAAC,MAAD;MAAQ,IAAI,EAAC,QAAb;MAAsB,IAAI,EAAE;IAA5B,EAJF;EAAA,EADF;AAQD"},"metadata":{},"sourceType":"module"}